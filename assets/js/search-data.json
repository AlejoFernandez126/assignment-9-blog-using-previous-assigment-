{
  
    
        "post0": {
            "title": "My Title",
            "content": "Instructions . Step 1: Choose one of your Jupyter notebooks from this quarter&#39;s other assignments. . Step 2: Create a new GitHub repository that contains this notebook, a README.md file, and a requirements.txt file. . The README file should contain a clear description of what&#39;s in the notebook, it should be properly styled with markdown, and it should contain a badge to launch an interactive version of your repository on Binder. The requirements.txt file should contain the Python libraries necessary to execute your notebook. If your notebook requires any data files, they should also be added to the repository. When clicking on the Binder badge and being taken to the relevant Binder site, your notebook should run from start to finish without error. . Step 3: Add this notebook and requirements.txt file to your repository created with fastai/fastpages in class. . Verify that the respective blog site contains the contents of your notebook. Your notebook will need to be pushed to GitHub before the new notebook will appear. Hide at least one code cell and make at least one code cell collapsable. . Step 4: Make a very short Zoom recording in which you preview your blog site and show which code cell is hidden and which is collapsable. . Step 5: When finished, submit the links to your new repository and to your blog site in the text entry box for this assignment, and submit your Zoom media recording under the &quot;Assignment 09 - Data analysis communication - Supplementary&quot; assignment. . import requests . response = requests.get(&#39;https://corgis-edu.github.io//corgis/csv/&#39;) . response . &lt;Response [200]&gt; . Step 2:Use requests and BeautifulSoup to make a list of all the CORGIS datasets. . from bs4 import BeautifulSoup . html_string = response.text . document = BeautifulSoup(html_string, &quot;html.parser&quot;) . document.find_all(&#39;h3&#39;) . [&lt;h3&gt;Aids&lt;/h3&gt;, &lt;h3&gt;Airlines&lt;/h3&gt;, &lt;h3&gt;Billionaires&lt;/h3&gt;, &lt;h3&gt;Broadway&lt;/h3&gt;, &lt;h3&gt;Business Dynamics&lt;/h3&gt;, &lt;h3&gt;Cancer&lt;/h3&gt;, &lt;h3&gt;Cars&lt;/h3&gt;, &lt;h3&gt;Classics&lt;/h3&gt;, &lt;h3&gt;Construction Permits&lt;/h3&gt;, &lt;h3&gt;Construction Spending&lt;/h3&gt;, &lt;h3&gt;County Demographics&lt;/h3&gt;, &lt;h3&gt;Covid&lt;/h3&gt;, &lt;h3&gt;Drugs&lt;/h3&gt;, &lt;h3&gt;Earthquakes&lt;/h3&gt;, &lt;h3&gt;Election&lt;/h3&gt;, &lt;h3&gt;Electricity&lt;/h3&gt;, &lt;h3&gt;Emissions&lt;/h3&gt;, &lt;h3&gt;Energy&lt;/h3&gt;, &lt;h3&gt;Finance&lt;/h3&gt;, &lt;h3&gt;Food&lt;/h3&gt;, &lt;h3&gt;Food Access&lt;/h3&gt;, &lt;h3&gt;Global Development&lt;/h3&gt;, &lt;h3&gt;Graduates&lt;/h3&gt;, &lt;h3&gt;Health&lt;/h3&gt;, &lt;h3&gt;Hospitals&lt;/h3&gt;, &lt;h3&gt;Hydropower&lt;/h3&gt;, &lt;h3&gt;Ingredients&lt;/h3&gt;, &lt;h3&gt;Injuries&lt;/h3&gt;, &lt;h3&gt;Labor&lt;/h3&gt;, &lt;h3&gt;Medal Of Honor&lt;/h3&gt;, &lt;h3&gt;Music&lt;/h3&gt;, &lt;h3&gt;Opioids&lt;/h3&gt;, &lt;h3&gt;Police Shootings&lt;/h3&gt;, &lt;h3&gt;Publishers&lt;/h3&gt;, &lt;h3&gt;Real Estate&lt;/h3&gt;, &lt;h3&gt;Retail Services&lt;/h3&gt;, &lt;h3&gt;School Scores&lt;/h3&gt;, &lt;h3&gt;Skyscrapers&lt;/h3&gt;, &lt;h3&gt;Slavery&lt;/h3&gt;, &lt;h3&gt;State Crime&lt;/h3&gt;, &lt;h3&gt;State Demographics&lt;/h3&gt;, &lt;h3&gt;State Fragility&lt;/h3&gt;, &lt;h3&gt;Suicide Attacks&lt;/h3&gt;, &lt;h3&gt;Supreme Court&lt;/h3&gt;, &lt;h3&gt;Tate&lt;/h3&gt;, &lt;h3&gt;Video Games&lt;/h3&gt;, &lt;h3&gt;Weather&lt;/h3&gt;, &lt;h3&gt;Wind Turbines&lt;/h3&gt;] . corgislist = [] for i in document.find_all(&quot;h3&quot;): corgislist.append(i.text.strip()) . corgislist #list of all CORGIS datasets . [&#39;Aids&#39;, &#39;Airlines&#39;, &#39;Billionaires&#39;, &#39;Broadway&#39;, &#39;Business Dynamics&#39;, &#39;Cancer&#39;, &#39;Cars&#39;, &#39;Classics&#39;, &#39;Construction Permits&#39;, &#39;Construction Spending&#39;, &#39;County Demographics&#39;, &#39;Covid&#39;, &#39;Drugs&#39;, &#39;Earthquakes&#39;, &#39;Election&#39;, &#39;Electricity&#39;, &#39;Emissions&#39;, &#39;Energy&#39;, &#39;Finance&#39;, &#39;Food&#39;, &#39;Food Access&#39;, &#39;Global Development&#39;, &#39;Graduates&#39;, &#39;Health&#39;, &#39;Hospitals&#39;, &#39;Hydropower&#39;, &#39;Ingredients&#39;, &#39;Injuries&#39;, &#39;Labor&#39;, &#39;Medal Of Honor&#39;, &#39;Music&#39;, &#39;Opioids&#39;, &#39;Police Shootings&#39;, &#39;Publishers&#39;, &#39;Real Estate&#39;, &#39;Retail Services&#39;, &#39;School Scores&#39;, &#39;Skyscrapers&#39;, &#39;Slavery&#39;, &#39;State Crime&#39;, &#39;State Demographics&#39;, &#39;State Fragility&#39;, &#39;Suicide Attacks&#39;, &#39;Supreme Court&#39;, &#39;Tate&#39;, &#39;Video Games&#39;, &#39;Weather&#39;, &#39;Wind Turbines&#39;] . Step 3: Write a function that takes an element from the list of CORGIS datasets, searches the respective CORGIS page for the CSV download link, and returns a Pandas dataframe. . import pandas as pd . def corgis(a): lower = a.lower() if &quot; &quot; in lower: #for elements that have more than one word (i.e. &#39;Medal of Honor&#39;, &#39;Supreme Court&#39;) lower = lower.replace(&quot; &quot;, &quot;_&quot;) response = requests.get(&#39;https://corgis-edu.github.io/corgis/csv/&#39; + lower + &#39;/&#39;) else: response = requests.get(&#39;https://corgis-edu.github.io/corgis/csv/&#39; + lower + &#39;/&#39;) html_string = response.text document = BeautifulSoup(html_string, &quot;html.parser&quot;) links = document.find_all(&#39;a&#39;) for i in links: if i.has_attr(&#39;download&#39;): download = i[&#39;href&#39;] downloadlink = &#39;https://corgis-edu.github.io/corgis/csv/&#39; + lower + &#39;/&#39; + download corgisdf = pd.read_csv(downloadlink) return corgisdf . Broadway Data Set . broadway_df = corgis(&#39;Broadway&#39;) broadway_df.columns . Index([&#39;Date.Day&#39;, &#39;Date.Full&#39;, &#39;Date.Month&#39;, &#39;Date.Year&#39;, &#39;Show.Name&#39;, &#39;Show.Theatre&#39;, &#39;Show.Type&#39;, &#39;Statistics.Attendance&#39;, &#39;Statistics.Capacity&#39;, &#39;Statistics.Gross&#39;, &#39;Statistics.Gross Potential&#39;, &#39;Statistics.Performances&#39;], dtype=&#39;object&#39;) . w = broadway_df.groupby(&#39;Show.Type&#39;)[[&#39;Statistics.Gross&#39;]].mean() w.plot(kind = &#39;bar&#39;) # The bar graph which demosntrates the mean Statistics Gross for each of the three different show types in Broadway # &#39;Statistics Gross&#39; == how much the show made in total across the entire week. . &lt;AxesSubplot:xlabel=&#39;Show.Type&#39;&gt; . Lets look at the Hospitals dataset . hs_df = corgis(&#39;Hospitals&#39;) hs_df.columns hs_df.head() . Facility.Name Facility.City Facility.State Facility.Type Rating.Overall Rating.Mortality Rating.Safety Rating.Readmission Rating.Experience Rating.Effectiveness ... Procedure.Heart Attack.Value Procedure.Heart Failure.Cost Procedure.Heart Failure.Quality Procedure.Heart Failure.Value Procedure.Pneumonia.Cost Procedure.Pneumonia.Quality Procedure.Pneumonia.Value Procedure.Hip Knee.Cost Procedure.Hip Knee.Quality Procedure.Hip Knee.Value . 0 Southeast Alabama Medical Center | Dothan | AL | Government | 2 | Below | Above | Below | Below | Same | ... | Average | 17041 | Average | Average | 18281 | Average | Average | 25812 | Average | Higher | . 1 Marshall Medical Center South | Boaz | AL | Government | 1 | Below | Below | Below | Same | Above | ... | Average | 15819 | Worse | Average | 15614 | Worse | Lower | 22747 | Average | Average | . 2 Eliza Coffee Memorial Hospital | Florence | AL | Government | 3 | Below | Above | Above | Below | Same | ... | Average | 16334 | Average | Average | 17371 | Average | Average | 24491 | Average | Higher | . 3 Mizell Memorial Hospital | Opp | AL | Private | 1 | Same | Same | Below | Below | Below | ... | Unknown | 14541 | Average | Lower | 15226 | Worse | Lower | 23472 | Average | Average | . 4 Crenshaw Community Hospital | Luverne | AL | Proprietary | 4 | Same | None | Above | None | Same | ... | Unknown | 13767 | Average | Lower | 14341 | Average | Lower | 0 | Unknown | Unknown | . 5 rows × 24 columns . hs_df.groupby(&#39;Rating.Overall&#39;)[[&#39;Procedure.Pneumonia.Cost&#39;]].mean().plot(kind = &#39;line&#39;) # if i did this correctly, then the graph below demonstrates the mean cost of a &#39;procedure pneumonia cost&#39; and aligns it witht the hsopitlas overall rating . &lt;AxesSubplot:xlabel=&#39;Rating.Overall&#39;&gt; . Lets look at the Billionaires dataset . bs_df = corgis(&#39;Billionaires&#39;) bs_df.columns . Index([&#39;name&#39;, &#39;rank&#39;, &#39;year&#39;, &#39;company.founded&#39;, &#39;company.name&#39;, &#39;company.relationship&#39;, &#39;company.sector&#39;, &#39;company.type&#39;, &#39;demographics.age&#39;, &#39;demographics.gender&#39;, &#39;location.citizenship&#39;, &#39;location.country code&#39;, &#39;location.gdp&#39;, &#39;location.region&#39;, &#39;wealth.type&#39;, &#39;wealth.worth in billions&#39;, &#39;wealth.how.category&#39;, &#39;wealth.how.from emerging&#39;, &#39;wealth.how.industry&#39;, &#39;wealth.how.inherited&#39;, &#39;wealth.how.was founder&#39;, &#39;wealth.how.was political&#39;], dtype=&#39;object&#39;) . billionaires = pd.DataFrame ({&#39;wealth.worth in billions&#39; : bs_df[&#39;wealth.worth in billions&#39;]}) billionaires.plot(kind = &#39;hist&#39;) # if i did this correctly this is a histortgram showing every billionaires wealth from the corgis billionaire dataset . &lt;AxesSubplot:ylabel=&#39;Frequency&#39;&gt; .",
            "url": "https://alejofernandez126.github.io/assignment-9-blog-using-previous-assigment-/fastpages/jupyter/2022/03/13/Corgis-data-overview.html",
            "relUrl": "/fastpages/jupyter/2022/03/13/Corgis-data-overview.html",
            "date": " • Mar 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alejofernandez126.github.io/assignment-9-blog-using-previous-assigment-/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alejofernandez126.github.io/assignment-9-blog-using-previous-assigment-/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alejofernandez126.github.io/assignment-9-blog-using-previous-assigment-/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alejofernandez126.github.io/assignment-9-blog-using-previous-assigment-/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}